* Other Application Recipes
{anchor: Application_Recipes}

|| Application || Platform || Recipe || Notes ||
| ANSA v12.1.0 | Linux/x86 \
	| Add \
		{nl}{nl} \
		''LD_PRELOAD_SAVE=$LD_PRELOAD''{nl} \
		''export LD_PRELOAD='' \
		{nl}{nl} \
		to the top of the ''ansa.sh'' script, then add \
		{nl}{nl} \
		''export LD_PRELOAD=$LD_PRELOAD_SAVE'' \
		{nl}{nl} \
		just prior to the ''${ANSA_EXEC_DIR}bin/ansa_linux${ext2}'' line. \
	| The ANSA startup script directly invokes ''/lib/libc.so.6'' to query \
		the glibc version.  Since the VirtualGL faker depends on libc, preloading \
		VirtualGL when directly invoking ''libc.so.6'' creates an infinite loop. \
		So it is necessary to disable the preloading of VirtualGL in the \
		application script and then re-enable it prior to launching the actual \
		application. \
	|
| ANSYS v11.0 | All \
	| If you experience extremely long delays (on the order of minutes) when \
		reading input data or performing other operations in ANSYS: \
		{nl}{nl} \
		If using the VGL Image Transport, set the environment variable \
		''VGL_INTERFRAME'' to ''0'' on the VirtualGL server prior to launching \
		ANSYS.  When running ANSYS in a TurboVNC session on the VirtualGL server, \
		set the environment variable ''VGL_FPS'' to ''20'' prior to launching \
		ANSYS. \
	| See [[#ansys_proe][notes]] below \
	|
| Army Ops | Linux/x86 \
	| ''vglrun -dl armyops'' \
	| See {ref prefix="Chapter ": dlopen} for more details \
	|
| AutoForm v4.0x | All \
	| ''vglrun +sync xaf_''__''{version}''__ \
	| AutoForm relies on mixed X11/OpenGL rendering, and thus certain features \
		(particularly the "Dynamic Section" dialog and "Export Image" feature) do \
		not work properly unless ''VGL_SYNC'' is enabled.  Since ''VGL_SYNC'' \
		automatically enables the X11 image transport and disables frame \
		spoiling, it is highly recommended that you use TurboVNC when \
		''VGL_SYNC'' is enabled.  See {ref prefix="Section ": VGL_SYNC} for more \
		details. \
	|
| Cedega v6.0.x | Linux \
	| Add \
		{nl}{nl} \
		''export LD_PRELOAD=librrfaker.so'' \
		{nl}{nl} \
		to the top of ''~/.cedega/.winex_ver/winex-{version}/bin/winex3'', then \
		run Cedega as you would normally (without ''vglrun''.)  Since ''vglrun'' \
		is not being used, it is necessary to use environment variables or the \
		VirtualGL Configuration dialog to modify VirtualGL's configuration. \
	| The actual binary (WineX) which uses OpenGL is buried beneath several \
		layers of Python and shell scripts.  The ''LD_PRELOAD'' variable does not \
		get propagated down from the initial shell that invoked ''vglrun''. \
	|
| Descent 3 | Linux/x86 \
	| ''vglrun descent3 -g /usr/lib/librrfaker.so'' \
		{nl}{nl} \
		or \
		{nl}{nl} \
		''vglrun -dl descent3'' \
	| See {ref prefix="Chapter ": dlopen} for more details \
	|
| Doom 3 | Linux/x86 	 \
	| ''vglrun doom3 +set r_glDriver /usr/lib/librrfaker.so'' \
		{nl}{nl} \
		or \
		{nl}{nl} \
		''vglrun -dl doom3'' \
	| See {ref prefix="Chapter ": dlopen} for more details \
	|
| Enemy Territory (Return to Castle Wolfenstein) | Linux/x86 \
	| ''vglrun et +set r_glDriver /usr/lib/librrfaker.so'' \
		{nl}{nl} \
		or \
		{nl}{nl} \
		''vglrun -dl et'' \
	| See {ref prefix="Chapter ": dlopen} for more details \
	|
| Heretic II | Linux/x86 \
	| ''vglrun heretic2 +set gl_driver /usr/lib/librrfaker.so +set vid_ref glx'' \
		{nl}{nl} \
		or \
		{nl}{nl} \
		''vglrun -dl heretic2 +set vid_ref glx'' \
	| See {ref prefix="Chapter ": dlopen} for more details \
	|
| Heavy Gear II | Linux/x86 \
	| ''vglrun hg2 -o /usr/lib/librrfaker.so'' \
		{nl}{nl} \
		or \
		{nl}{nl} \
		''vglrun -dl hg2'' \
	| See {ref prefix="Chapter ": dlopen} for more details \
	|
| HyperWorks v8 (Altair) | Linux/x86-64 \
	| ''vglrun -dl ''__''{application script}''__ \
	| See {ref prefix="Chapter ": dlopen} for more details. \
	|
| I-deas Master Series 9, 10, & 11 | Solaris/Sparc \
	| When running I-deas with VirtualGL on a Solaris/Sparc server, remotely \
		displaying to a non-Sparc client machine or to an X proxy such as VNC, \
		it may be necessary to set the ''SDRC_SUN_IGNORE_GAMMA'' environment \
		variable to ''1''. \
	| I-deas normally aborts if it detects that the X visual assigned to it is \
		not gamma-corrected.  But gamma-corrected X visuals only exist on \
		Solaris/Sparc X servers, so if you are displaying the application to \
		another type of X server or X proxy which doesn't provide gamma-corrected \
		X visuals, then it is necessary to override the gamma detection mechanism \
		in I-deas. \
	|
| Java2D applications that use OpenGL | Linux, Solaris \
	| Java2D will use OpenGL to perform its rendering if ''sun.java2d.opengl'' \
		is set to ''True''.  For example: \
		{nl}{nl} \
		''java -Dsun.java2d.opengl=True MyAppClass'' \
		{nl}{nl} \
		In order for this to work in VirtualGL, it is necessary to invoke \
		''vglrun'' with the ''-dl'' switch.  For example: \
		{nl}{nl} \
		''vglrun -dl java -Dsun.java2d.opengl=True MyAppClass'' \
		{nl}{nl} \
		If you are using Java v6 b92 or later, you can also set the environment \
		variable ''J2D_ALT_LIBGL_PATH'' to the path of ''librrfaker.so''.  For example: \
		{nl}{nl} \
		''setenv J2D_ALT_LIBGL_PATH /opt/VirtualGL/lib/librrfaker.so''{nl} \
		''vglrun java -Dsun.java2d.opengl=True MyAppClass'' \
		{nl}{nl} \
	| See {ref prefix="Chapter ": dlopen} for more details \
	|
| Java2D applications that use OpenGL | Solaris/Sparc \
	| When VirtualGL is used in conjunction with Java v5.0 (also known as Java \
		1.5.0) to remotely display Java2D applications using the OpenGL pipeline \
		(see above), certain Java2D applications will cause the OpenGL subsystem \
		to crash with the following error: \
		{nl}{nl} \
		''thread tries to access GL context current to another thread'' \
		{nl}{nl} \
		If you encounter this error, try setting the ''SUN_OGL_IS_MT'' environment \
		variable to ''1'' and re-running the application. \
	| Java 5.0 should call ''glXInitThreadsSUN()'' since it is using multiple \
		OpenGL threads, but it doesn't.  Purely by chance, this doesn't cause any \
		problems when the application is displayed locally.  But VirtualGL \
		changes things up enough that the luck runs out.  This issue does not \
		exist in Java 6. \
	|
| Pro/ENGINEER Wildfire v2.0 | Solaris/Sparc \
	| Add \
		{nl}{nl} \
		''graphics opengl'' \
		{nl}{nl} \
		to ''~/config.pro''.  You may also need to set the ''VGL_XVENDOR'' \
		environment variable to ''"Sun Microsystems, Inc."'' if you are running \
		Pro/ENGINEER 2.0 over a remote X connection to a Linux or Windows \
		VirtualGL client. \
	|	Pro/E 2.0 for Solaris will disable OpenGL if it detects a remote \
		connection to a non-Sun X server. \
	|
| Pro/ENGINEER Wildfire v3.0 | All \
	| If you experience extremely long delays (on the order of minutes) when \
		zooming or performing other operations in Pro/E: \
		{nl}{nl} \
		If using the VGL Image Transport, set the environment variable \
		''VGL_INTERFRAME'' to ''0'' on the VirtualGL server prior to launching \
		Pro/E.  When running Pro/E in a TurboVNC session on the VirtualGL server, \
		set the environment variable ''VGL_FPS'' to ''20'' prior to launching \
		Pro/E. \
	| See [[#ansys_proe][notes]] below \
	|
| QGL (OpenGL Qt Widget) | Linux \
	| ''vglrun -dl {application}'' \
	| Qt can be built such that it either resolves symbols from libGL \
		automatically or uses ''dlopen()'' to manually resolve those symbols \
		from libGL.  As of Qt v3.3, the latter behavior is the default, so \
		OpenGL programs built with later versions of libQt will not work with \
		VirtualGL unless the ''-dl'' switch is used with ''vglrun''. \
		{nl}{nl} \
		See {ref prefix="Chapter ": dlopen} for more details \
	|
| Quake 3 | Linux/x86 \
	| ''vglrun quake3 +set r_glDriver /usr/lib/librrfaker.so'' \
		{nl}{nl} \
		or \
		{nl}{nl} \
		''vglrun -dl quake3'' \
	|	See {ref prefix="Chapter ": dlopen} for more details \
	|
| Soldier of Fortune | Linux/x86 \
	| ''vglrun sof +set gl_driver /usr/lib/librrfaker.so'' \
		{nl}{nl} \
		or \
		{nl}{nl} \
		''vglrun -dl sof'' \
	|	See {ref prefix="Chapter ": dlopen} for more details \
	|
| Unreal Tournament 2004 | Linux/x86 \
	| ''vglrun -dl ut2004'' \
	|	See {ref prefix="Chapter ": dlopen} for more details \
	|
| Wine | Linux \
	|	''vglrun -dl wine {windows_opengl_app.exe}'' \
	| See {ref prefix="Chapter ": dlopen} for more details \
	|

*** Notes for ANSYS and Pro/E
#OPT: noList! plain!
{anchor:ansys_proe}

ANSYS and Pro/E frequently render to the front buffer and, for unknown reasons,
call ''glFlush()'' thousands of times in a row even if nothing new has been
rendered.  This exposes a vulnerability in VirtualGL's framebuffer readback
heuristics.  Normally, when an application calls ''glFlush()'' on the front
buffer, VirtualGL will read back, compress, and send the pixels from the front
buffer.  But if ''glFlush()'' is called thousands of times without changing the
contents of the frame buffer, this causes VirtualGL to read back, compress,
and send thousands of duplicate images.  Whereas calling ''glFlush()'' on a
local display takes practically no time, reading back and sending an image in
VirtualGL takes a relatively long amount of time.  So, left unchecked, this
phenomenon can lead to delays of several minutes when performing certain
operations in ANSYS and Pro/E while using VirtualGL.

If frame spoiling is enabled, then VirtualGL will not read back the framebuffer
in response to a ''glFlush()'' call if a prior image is still being
compressed/sent.  Ideally, this would cause most of the duplicate ''glFlush()''
calls to be ignored by VirtualGL.  However, this frame spoiling algorithm only
works if it takes longer to compress and send an image than it does to read
it back from the framebuffer.  Frames are spoiled during the time that the
readback thread is waiting for the compressor thread to finish with the
previous frame, so if the readback thread never has to wait on the compressor
thread, then no frames are ever spoiled.  There are several reasons why this
could occur:

	#. The system contains an old, slow bus (AGP, for instance) and thus the
		readback performance from the graphics card is relatively slow.
	#. TurboVNC is being used on the same server as VirtualGL.  If this is the
		case, then the compressor thread is passing images to TurboVNC through
		shared memory, which (even on modern systems) is almost always faster than
		reading back images from the graphics card.
	#. Interframe comparison is enabled in the VGL Image Transport.  In the case
		of ANSYS and Pro/E, each duplicate frame can be compared and
		discarded by the compressor much more quickly than it can be read back from
		the graphics card, so no spoiling occurs.

A more robust fix for this problem is slated for the next release of VirtualGL,
but for now, it is necessary to work around the issue if it occurs.  The
workaround is essentially to slow the compressor thread down such that it is
slower than the readback thread.  When using the VGL Image Transport, it is
usually only necessary to disable interframe comparison (''VGL_INTERFRAME=0'')
to accomplish this.  But when using the X11 Image Transport and TurboVNC,
it is necessary to introduce an artificial delay into the compressor thread by
setting ''VGL_FPS''.  A value of ''20'' for ''VGL_FPS'' is a reasonable
starting point, but you may have to decrease this value if the readback
performance on your system is exceptionally slow.
