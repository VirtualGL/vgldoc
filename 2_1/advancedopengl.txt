* Advanced OpenGL Features
{anchor: Advanced_OpenGL}

** Stereographic Rendering

Stereographic rendering is a feature of OpenGL that creates separate rendering
buffers for the left and right eyes and allows the application to render a
different image into each buffer.  How the stereo images are subsequently
displayed depends on the particulars of the 3D hardware and the user's
environment.  VirtualGL can support stereographic applications in one of two
ways: (1) by sending the stereo image pairs to the client to be displayed in
stereo by the client's 3D graphics card, or (2) by combining each stereo image
pair into a single anaglyph that can be viewed with traditional red/cyan 3D
glasses.

*** Quad-Buffered Stereo

The name "quad-buffered" stereo derives from the fact that OpenGL uses four
buffers (left front, right front, left back, and right back) to support
stereographic rendering with double buffering.  3D graphics cards with
quad-buffered stereo capabilities generally provide some sort of
synchronization signal that can be used to control various types of active
stereo 3D glasses.  Some also support "passive stereo", which displays the left
and right eye buffers to different monitor outputs.  VirtualGL supports true
quad-buffered stereo by rendering the stereo images on the server and sending
the image pairs across the network to be displayed by a 3D graphics card on the
client.

In most cases, the VirtualGL and TurboVNC clients use only 2D drawing commands,
thus eliminating the need for a 3D graphics card on the client machine.  But
drawing stereo images requires a 3D graphics card, so such a card must be
present in any client machine that will use VirtualGL's quad-buffered stereo
mode.  Since the 3D graphics card is only being used to draw images, it need
not necessarily be a high-end card.  Generally, the least expensive 3D graphics
card that has stereo capabilities will work fine in a VirtualGL client.

The server must also have a 3D graphics card that supports stereo, since this
is the only way that VirtualGL can obtain a stereo Pbuffer.  When an
application tries to render something in stereo, VirtualGL will (by default)
use quad-buffered stereo rendering if:

	* The client supports OpenGL (Exceed 3D is required for Windows clients)
	* The client has stereo rendering capabilities
	* The server has stereo rendering capabilities

If one or more of these is not true, then VirtualGL will fall back to using
anaglyphic stereo (see below.)  It is usually necessary to explicitly enable
stereo in the graphics driver configuration for both the client and server
machines.  The [[#Troubleshooting]] section below lists a way to verify
that both client and server have stereo visuals available.

In quad-buffered mode, VirtualGL reads back both eye buffers on the server
and sends the contents as a pair of compressed images (one for each eye) to the
VirtualGL Client.  The VirtualGL Client then decompresses both images and draws them
as a single stereo frame to the client machine's X display using ''glDrawPixels()''.  It
should thus be no surprise that enabling quad-buffered stereo in VirtualGL
decreases performance by 50% or more and uses twice the network bandwidth to
maintain the same frame rate.

Quad-buffered stereo requires the VGL Image Transport.  If any other image
transport is used, then VGL will fall back to anaglyphic stereo mode.

*** Anaglyphic Stereo

Anaglyphic stereo is the type of stereographic display used by old 3D movies.
It generally relies on a set of 3D glasses consisting of red transparency film
over the left eye and cyan transparency film over the right eye.  To generate a
3D anaglyph, the red color data from the left eye buffer is combined with the
green and blue color data from the right eye buffer, thus allowing a single
monographic image to contain stereo data.  From the point of view of VirtualGL,
an anaglyphic image is the same as a monographic image, so anaglyphic stereo
images can be sent using any image transport to any type of client, regardless
of the client's capabilities.

VirtualGL uses anaglyphic stereo if it detects that an application has rendered
something in stereo but quad-buffered stereo is not available, either because
the client doesn't support it or because a transport other than the VGL Image
Transport is being used.  Anaglyphic stereo provides a cheap and easy way to
view stereographic applications in X proxies and on clients that do not support
quad-buffered stereo.  Additionally, anaglyphic stereo performs much faster
than quad-buffered stereo, since it does not require sending twice the data to
the client.

As with quad-buffered stereo, anaglyphic stereo requires that the server have
stereo rendering capabilities.  However, anaglyphic stereo does not require
any 3D rendering capabilities (stereo or otherwise) on the client.

*** Selecting a Stereo Mode

A particular stereo mode can be selected by setting the ''VGL_STEREO''
environment variable or by using the ''-st'' argument to ''vglrun''.  See
{ref prefix="Section ": VGL_STEREO} for more details.

** Transparent Overlays

Transparent overlays have similar requirements and restrictions as
quad-buffered stereo.  In this case, VirtualGL completely bypasses its own GLX
faker and uses indirect OpenGL rendering to render the transparent overlay on
the client machine's 3D graphics card.  The underlay is still rendered on the
server, as always.  Using indirect rendering to render the overlay is
unfortunately necessary, because there is no reliable way to draw to an overlay
using 2D (X11) functions, there are severe performance issues (on some cards)
with using ''glDrawPixels()'' to draw to the overlay, and there is no
reasonable way to composite the overlay and underlay on the VirtualGL server.

The use of overlays is becoming more and more infrequent, and when they are
used, it is generally only for drawing small, simple, static shapes and text.
We have found that it is often faster to send the overlay geometry over to the
client rather than to render it as an image and send the image.  So even if
it were possible to implement overlays without using indirect rendering, it's
likely that indirect rendering of overlays would still be the fastest approach
for most applications.

As with stereo, overlays must sometimes be explicitly enabled in the graphics
card's configuration.  In the case of overlays, however, they need only be
supported and enabled on the client machine.

Indexed color (8-bit) overlays have been tested and are known to work with
VirtualGL.  True color (24-bit) overlays work, in theory, but have not been
tested.  Use ''glxinfo'' (see [[#Troubleshooting]] below) to verify whether your
client's X display supports overlays and whether they are enabled.  In Exceed
3D, make sure that the "Overlay Support" option is checked in the "Exceed 3D
and GLX" applet:

{img: exceed6.png}

	!!! Overlays do not work with X proxies (including TurboVNC.)  VirtualGL must
	be displaying to a "real" X server.

** Indexed (PseudoColor) Rendering

In a PseudoColor visual, each pixel is represented by an index which refers to
a location in a color table.  The color table stores the actual color values
(256 of them in the case of 8-bit PseudoColor) which correspond to each index.
An application merely tells the X server which color index to use when drawing,
and the X server takes care of mapping that index to an actual color from the
color table.  OpenGL allows for rendering to Pseudocolor visuals, and it does
so by being intentionally ignorant of the relationship between indices and
actual colors.  As far as OpenGL is concerned, each color index value is just
a meaningless number, and it is only when the final image is drawn by the X
server that these numbers take on meaning.  As a result, many pieces of
OpenGL's core functionality either have undefined behavior or do not work at
all with PseudoColor rendering.  PseudoColor rendering used to be a common
technique to visualize scientific data, because such data often only contained
8 bits per sample to begin with.  Applications could manipulate the color table
to allow the user to dynamically control the relationship between sample values
and colors.  As more and more graphics cards drop support for PseudoColor
rendering, however, the applications which use it are becoming a vanishing
breed.

VirtualGL supports PseudoColor rendering if a PseudoColor visual is available
on the client's display.  A PseudoColor visual need not be present on the
server.  On the server, VirtualGL uses the red channel of a standard RGB
Pbuffer to store the color index.  Upon receiving an end of frame trigger,
VirtualGL reads back the red channel of the Pbuffer and uses ''XPutImage()'' to
draw the color indices into the appropriate X window.  To put this another way,
PseudoColor rendering in VirtualGL always uses the X11 Image Transport.
However, since there is only 1 byte per pixel in a PseudoColor "image", the
images can still be sent to the client reasonably quickly even though they are
uncompressed.

VirtualGL's PseudoColor rendering support works with VNC, provided that the
VNC server is configured with an 8-bit color depth.  TurboVNC does not support
8-bit color depths, but RealVNC and other VNC flavors do.  Note, however, that
VNC cannot provide both PseudoColor and TrueColor visuals at the same time.

** Troubleshooting
{anchor: Troubleshooting}

VirtualGL includes a modified version of ''glxinfo'' that can be used to
determine whether or not the client and server have stereo, overlay, or
Pseudocolor visuals enabled.

Run one of the following command sequences on the VirtualGL server to determine
whether the server has a suitable visual for stereographic rendering:

	Solaris servers (using GLP) :: {:}
		#Verb: <<---
		/opt/VirtualGL/bin/glxinfo -d {glp_device} -v
		---

	Linux and Solaris servers (not using GLP) :: {:}
		#Verb: <<---
		xauth merge /etc/opt/VirtualGL/vgl_xauth_key
		/opt/VirtualGL/bin/glxinfo -display :0 -c -v
		---

One or more of the visuals should say "stereo=1" and should list "Pbuffer"
as one of the "Drawable Types."

Run the following command sequence on the VirtualGL server to determine
whether the X display on the client has a suitable visual for stereographic
rendering, transparent overlays, or Pseudocolor.

	#Verb: <<---
	/opt/VirtualGL/bin/glxinfo -v
	---

In order to use stereo, one or more of the visuals should say "stereo=1".
In order to use transparent overlays, one or more of the visuals should say
"level=1", should list a "Transparent Index" (non-transparent visuals will say
"Opaque" instead), and should have a class of "PseudoColor."  In order to use
PseudoColor (indexed) rendering, one of the visuals should have a class of
"PseudoColor."
