* Securing Direct Mode

** Built-In SSL Encryption

VirtualGL has built-in support for encrypting its compressed image stream
inside a Secure Socket Layer (SSL.)  For performance reasons, this feature is
not enabled by default, but it can easily be enabled.  On the server, set the
environment variable ''VGL_SSL'' to ''1'' prior to launching the application,
or pass an argument of ''+s'' to ''vglrun''.  No action is required on the
client.  The client will automatically accept SSL or unencrypted connections,
unless you have configured it otherwise (see
{ref prefix="Section ": Advanced_Configuration} for more details.)

** Direct Mode over SSh

So what if your only path into the network is through SSh, perhaps through a
single "gateway" machine.  No problem, because SSh allows you to tunnel both
incoming and outgoing TCP/IP connections on any port from one machine to
another.  Tunneling VirtualGL's compressed image stream through SSh will not be
as fast as using the built-in SSL encryption capabilities of VirtualGL, but
sometimes it's the only option available.

Let's assume the following configuration:

{img: sshtunnel.png}

What we want to do is tunnel both the X11 protocol stream and VirtualGL's
compressed image stream through SSh.  Here's one way to do it:

	#. Start the VirtualGL client

	#. If the client machine is running Windows,

			a. Start Exceed

			b. Open a console and type

				#Verb: <<---
				set DISPLAY=localhost:0.0
				---

				(replace ":0.0" with whatever display number Exceed is parking on.)

	#. In that same console:

		#Verb: <<---
		ssh -X -R 4242:localhost:4242 username@ssh_gateway_machine
		---

		This tells SSh to tunnel all X11 traffic from your session on
		''ssh_gateway_machine'' to your client's display, and additionally it will
		tunnel all outbound traffic to port 4242 on ''ssh_gateway_machine'' to
		inbound port 4242 on your client machine.

		!!! This command line also works with PuTTY.  Just replace "ssh" with the
		path to the PuTTY executable.  You can also configure the same thing
		through the PuTTY GUI as follows:
		{nl}{nl}
		{img: putty2.png}

	#. Now you should have a terminal session open into ''ssh_gateway_machine''.
		Inside this session, issue the following command:

		#Verb: <<---
		ssh -X -R 4242:localhost:4242 username@app_server_machine
		---

		This tells SSh to tunnel all X11 traffic from your session on
		''app_server_machine'' to your session on ''ssh_gateway_machine'', where it
		will be re-tunneled to the client display.  Additionally, all outbound
		traffic to port 4242 on ''app_server_machine'' will be tunneled to port
		4242 on ''ssh_gateway_machine'', which will then re-tunnel the traffic to
		inbound port 4242 on your client machine.

	#. You should now have a terminal session open into ''app_server_machine''.
		Inside that session, set the environment variable ''VGL_CLIENT'' to
		''localhost:n.0'', where ''n'' is the display number of the X server
		running on the Client machine.

	#. ''vglrun'' your application.

You can of course replace port 4242 in all of the steps above with whatever
port you choose, but make sure that if you change the port, you configure both
the client and server to talk on the port you choose (using the ''-port''
argument to ''vglclient'' as well as the ''VGL_PORT'' environment variable on
the server.)

	!!! This same procedure would also work if you needed to connect directly to
	''app_server_machine'' and tunnel everything over SSh.  In that case, simply
	leave out Step 3.
