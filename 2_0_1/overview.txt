* Overview
{anchor: Overview}

VirtualGL is an open source package which gives any Unix or Linux remote
display software the ability to run OpenGL applications with full 3D
hardware acceleration.  Some remote display software, such as VNC, lacks the
ability to run OpenGL applications entirely.  Other remote display software
forces OpenGL applications to use a slow software-only OpenGL renderer, to the
detriment of both performance as well as compatibility.  And running OpenGL
applications using the traditional remote X-Windows approach causes all of the
OpenGL commands and 3D data to be sent over the network to be rendered on the
client machine, which is not a tenable proposition unless the data is
relatively small and static, unless the network is fast, and unless
the OpenGL application is specifically tuned for a remote X-Windows
environment.

With VirtualGL, the OpenGL commands and 3D data are instead redirected to a
3D graphics accelerator on the server machine, and only the rendered 3D images
are sent to the client machine.  VirtualGL thus "virtualizes" 3D graphics
hardware, allowing it to be co-located in the "cold room" with compute and
storage resources.  VirtualGL also allows 3D graphics hardware to be shared
among multiple users, and it provides real-time performance on even the most
modest of networks.  This makes it possible for large, noisy, hot 3D
workstations to be replaced with laptops or even thinner clients, but more
importantly, it eliminates the workstation and the network as barriers to
data size.  Users can now visualize gigabytes and gigabytes of data in real
time without needing to cache any of the data locally or sit in front of the
machine that is rendering the data.

VirtualGL has two basic modes of operation:  "Direct" Mode and "Raw" Mode.  In
both modes, a separate X-Windows server (or X-Windows proxy) is used to display
the application's GUI and to provide keyboard/mouse interaction.

{anchor: Direct_Mode}
	\1. "Direct" Mode :: Direct Mode is most often used whenever the X server is
	located across the network from the graphics server, for instance if the X server
	is running on the user's desktop machine.  In this case, the 3D application
	sends X11 commands across the network to the X server in order to display
	the application GUI, and the application receives X11 events back from the
	X server in order to respond to keyboard and mouse interaction from the user.
	Normally, a 3D application would also send GLX commands across the network
	to the X server in order to establish an OpenGL rendering context on the
	client machine.  Such an "indirect" OpenGL context could then be used to
	tunnel OpenGL commands and 3D data inside the X-Windows protocol stream.  But
	VirtualGL instead intercepts the GLX commands from the application so that
	it can force the OpenGL rendering context to be established in an invisible
	pixel buffer ("Pbuffer") on a 3D graphics card in the server machine.
	VirtualGL also monitors buffer swaps and other commands from the application
	in order to determine when the application has finished rendering a frame.
	When such an end-of-frame trigger is detected, VGL reads back the
	rendered frame from the 3D graphics card, compresses it using a high-speed
	image codec, and sends the compressed image directly to the client machine
	using a dedicated TCP socket.  A separate VirtualGL Client application runs
	on the client machine, and this VirtualGL Client application decompresses
	the compressed frame and composites it into the appropriate X window.{nl} \
	{nl} \
	Direct Mode is the fastest solution for running VirtualGL on a local area
	network, and it provides the same usability as running the 3D application
	"locally" on a workstation.  Direct Mode does not work particularly well on a
	high-latency or low-bandwidth network due to its reliance on the remote
	X-Windows protocol for displaying the application's GUI.  However, it works
	great with any modest laptop and 802.11g wireless or 100 Megabit Ethernet.

#IMG: directmode.png
#OPT fmt=latex: w=4cm
#CAP: VirtualGL in Direct Mode

{anchor: Raw_Mode}
	\2. "Raw" Mode :: In this mode, VirtualGL does not compress the rendered 3D
	images itself but rather sends them in uncompressed form to an X server.
	This is most useful in conjunction with an "X Proxy", which can be one of any
	number of Unix remote display applications, such as VNC.  These X proxies
	are essentially "virtual" X servers.  They appear to the application to be
	a normal X server, but they perform X11 rendering to a virtual framebuffer
	in the server machine's memory rather than to a real hardware framebuffer.
	This allows the X proxy to send only images to the client machine rather than
	chatty X-Windows commands.  As with Direct Mode, VirtualGL intercepts the
	GLX calls from the application and thus forces the application to render
	into an OpenGL Pbuffer located on the server machine's graphics card.
	VirtualGL also reads back the rendered images, as with Direct Mode.  But in
	Raw Mode, VirtualGL draws the rendered 3D images into the X server as
	uncompressed 2D bitmaps.  If the X server is really an X proxy, then
	VirtualGL relies on this X proxy to compress the images and send them to the
	client(s).  Since the use of an X proxy eliminates the need to send X-Windows
	commands over the network, this is the best means of using VirtualGL when
	the network has high latency or low bandwidth.  The VirtualGL project
	provides an accelerated version of VNC, called "TurboVNC", which is meant to
	be used with VirtualGL in Raw Mode on such networks.  TurboVNC also provides
	rudimentary collaboration capabilities, allowing multiple users to
	simultaneously interact with the same 3D application.  But whereas Direct
	Mode produces a similar user experience to running the 3D application
	"locally", VNC and most other X proxies require the user to interact with a
	"desktop in a window", which is not a completely seamless experience.{nl} \
	{nl} \
	Raw	Mode, in conjunction with an X proxy, is typically used to run
	data-intensive 3D applications in a "cold room" and remotely interact with
	these applications from a PC or laptop located in another city.  However, Raw
	Mode can also be used to transmit images directly to the client machine, if
	the network is sufficiently fast (Gigabit Ethernet, for instance.)

#IMG: rawmodetoxproxy.png
#OPT fmt=latex: w=4cm
#CAP: VirtualGL in Raw Mode with an X proxy on the graphics server

#IMG: rawmodeoverservernetwork.png
#OPT fmt=latex: w=4cm
#CAP: VirtualGL in Raw Mode with an X proxy on a different server

#IMG: rawmodeovernetwork.png
#OPT fmt=latex: w=4cm
#CAP: VirtualGL in Raw Mode with no X proxy

----8<--------------
