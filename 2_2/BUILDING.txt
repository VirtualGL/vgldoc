How to build VirtualGL in 9043 easy steps
=========================================


*******************************************************************************
**     A note about OpenSSL support
*******************************************************************************

   If built with OpenSSL support, VirtualGL can use OpenSSL to encrypt the
   traffic it sends via the VGL Transport.  This is only a marginally useful
   feature, however, since VirtualGL can also tunnel the VGL Transport through
   SSh.  Including OpenSSL support in the VirtualGL distribution packages
   required us to statically link with the OpenSSL libraries, which required us
   to keep abreast of any security fixes to those libraries.  Thus, embedded
   OpenSSL support is not enabled by default in this release of VirtualGL.

   However, you can easily include OpenSSL support in your custom build of
   VirtualGL by specifying USESSL=yes as an argument to 'make' or by adding
   USESSL=yes to a file named "config" in the VirtualGL build directory
   (create the file if it doesn't exist.)


*******************************************************************************
**     Prerequisites - Linux
*******************************************************************************

-- OpenSSL headers and link libraries (optional)

   VirtualGL can be built using the shared OpenSSL libraries provided with
   your Linux distribution, but this produces a version of VirtualGL that may
   not be compatible with other Linux distributions.  In order to build a fully
   cross-compatible version of VirtualGL, you must link VirtualGL against
   static versions of the OpenSSL libraries.  If your system already has
   libssl.a and libcrypto.a installed, then you can use the SSLINC and SSLLIB
   Makefile options (see "Makefile Options" below) to tell VirtualGL to link
   against your existing copy of these libraries.  Otherwise, follow the
   instructions below to build libssl.a and libcrypto.a from scratch.

   * Download the latest OpenSSL source tarball from http://www.openssl.org
   * Extract the tarball into the directory one level up from your VirtualGL
     build directory
   * Rename the OpenSSL source directory to "openssl.linux64" if you are
     building a 64-bit version of VirtualGL or "openssl.linux" if you are
     building a 32-bit version of VirtualGL.
   * cd to the OpenSSL source directory and issue one of the following
     commands to configure the OpenSSL build:

     64-bit:
     ./Configure linux-x86_64 shared

     32-bit:
     ./Configure -m32 linux-generic32 shared

   * Build OpenSSL:

     make

-- GCC and G++

-- X11 dev. kit

   On most Linux variants, this can be found in the "XFree86-devel" or 
   "xorg-x11-devel" package.  On Ubuntu, it is in the "libx11-dev" package.

-- GNU Make v3.7 or later

-- binutils 2.12.90 or later.  This shouldn't be an issue unless you are
   (still) running RedHat 7.x or Enterprise Linux 2.1, in which case you can
   download an updated binutils RPM from:
   http://mirror.atrpms.net/ccrma/mirror/7.2/

-- libjpeg-turbo SDK

   The libjpeg-turbo SDK Linux packages (in RPM or DEB format) can be obtained
   from the "Files" area of:

   http://sourceforge.net/projects/libjpeg-turbo/


*******************************************************************************
**     Prerequisites - x86-64 Linux
*******************************************************************************

Building a redistributable VirtualGL package for x86-64 requires building both
32-bit and 64-bit versions of the VirtualGL server components.  However, not
all x86-64 Linux systems contain the 32-bit libraries necessary to build a
32-bit version of VirtualGL.  To build 32-bit VirtualGL components on an x86-64
Linux system, you will need, at minimum, the following 32-bit libraries:

-- glibc development libraries

   * Usually contained in the "glibc-devel" package (iX86)
   * Usually installed by default on x86-64 Linux systems
   * On Ubuntu, these are contained in the "libc6-dev-i386" and "ia32-libs"
     packages.

-- X11 dev. kit

   * Usually contained in the "XFree86-devel" or "xorg-x11-devel" package
     (iX86)
   * Not always installed by default but usually available on the installation
     discs
   * On Ubuntu, you may need to use getlibs
     (http://ubuntuforums.org/showthread.php?t=474790&highlight=getlibs) to
     install the 32-bit X11 dev. kit:
     > sudo getlibs -p libX11-dev
     > sudo getlibs -p libxext-dev
     > sudo getlibs -p libxau-dev
     > sudo getlibs -p libglu1-mesa-dev

If for some reason your preferred 64-bit Linux distribution does not contain
one or more of the necessary 32-bit prerequisites, then:

  (1) Complain to your distribution vendor.
  (2) All x86-64 distributions of Linux have a corresponding 32-bit-only
      distribution, usually released on a separate set of discs.  On those
      discs, you should be able to find the 32-bit versions of the X11 dev. kit
      and the GLIBC dev. kit to match the 64-bit versions that are already
      installed on your system. You may have to use 'rpm --force' to force the
      install of the 32-bit development packages, since they might contain
      header files which conflict with the 64-bit development packages that
      are already installed.  On Debian-based systems, you will need to use
      'dpkg --force-architecture' to force the installation of i386 packages
      on an amd64 system.  See item (1) above.


*******************************************************************************
**     Prerequisites - Mac
*******************************************************************************

-- Xcode Tools
   * Available on the OS X install discs or from:
     http://developer.apple.com/tools/xcode
   * At minimum, you will need the following packages from Xcode:
     gcc v3 or above
     X11 SDK
     OpenGL SDK
     Mac OS X SDK

-- libjpeg-turbo SDK (Intel-based Macs only)

   * The libjpeg-turbo SDK disk image (DMG) can be obtained from the "Files"
     area of:

     http://sourceforge.net/projects/libjpeg-turbo

   * Open the DMG file and double-click on the package inside to install
     libjpeg-turbo.

-- Quicktime and CoreAudio SDK's (PowerPC-based Macs only)

-- On OS X 10.6 and later, VirtualGL can be built as a 64-bit binary, but this
   is not the default.  To build a 64-bit Mac binary, pass an argument of
   "subplatform=64" to 'make' when performing the build:

     make subplatform=64

   You can also add

     subplatform=64

   to the "config.osxx86" file to make 64-bit builds the default.  The 64-bit
   binaries will reside in "osxx8664/bin" and "osxx8664/lib".


*******************************************************************************
**     Prerequisites - Solaris
*******************************************************************************

-- Solaris 10/OpenSolaris 2008.11 or newer

-- OpenSSL headers and link libraries (optional)

   VirtualGL can be built using the shared OpenSSL libraries provided with
   your Solaris distribution, but this produces a version of VirtualGL that may
   not be compatible with other versions of Solaris.  In order to build a fully
   cross-compatible version of VirtualGL, you must link VirtualGL against
   static versions of the OpenSSL libraries.  If your system already has
   libssl.a and libcrypto.a installed, then you can use the SSLINC and SSLLIB
   Makefile options (see "Makefile Options" below) to tell VirtualGL to link
   against your existing copy of these libraries.  Otherwise, follow the
   instructions below to build libssl.a and libcrypto.a from scratch.

   * Download the latest OpenSSL source tarball from http://www.openssl.org
   * Extract the tarball into the directory one level up from your VirtualGL
     build directory
   * Rename the OpenSSL source directory to "openssl.solaris64" if you are
     building a 64-bit SPARC version of VirtualGL, "openssl.solaris" if you are
     building a 32-bit SPARC version of VirtualGL, "openssl.solx8664" if you
     are building a 64-bit x86 version of VirtualGL, or "openssl.solx86" if
     you are building a 32-bit x86 version of VirtualGL.
   * cd to the OpenSSL source directory and issue one of the following
     commands to configure the OpenSSL build:

     64-bit SPARC:
     ./Configure solaris64-sparcv9-cc shared

     32-bit SPARC:
     ./Configure solaris-sparcv8-cc shared

     64-bit x86:
     ./Configure solaris64-x86_64-cc shared

     32-bit x86:
     ./Configure solaris-x86-cc shared

     (If you plan to use GCC to build VirtualGL, replace "cc" with "gcc" in
     all of the above.)

   * Build OpenSSL:

     make

-- Sun Studio 12 or later

   * See http://www.sun.com/software/products/studio/ for a free download.

... or ...

-- GCC

   * Ships with later versions of Solaris 10
   * Also available from Blastwave (http://www.blastwave.org),
     OpenCSW (http://www.opencsw.org/), or
     SunFreeware (http://www.sunfreeware.com/)
   * Build VirtualGL using
       gmake CC=gcc

-- SPARC ONLY:  Sun OpenGL

   * Requires v1.3 or later (1.5 or later recommended)
   * See http://www.sun.com/software/graphics/opengl/
   * If your build system has Sun OpenGL v1.3, build VirtualGL using
       gmake USEGLP=no

-- GNU Make v3.7 or later

   * Ships with later versions of Solaris 10
   * Also available from Blastwave (http://www.blastwave.org),
     OpenCSW (http://www.opencsw.org/), or
     SunFreeware (http://www.sunfreeware.com/)

-- SPARC ONLY:  Sun mediaLib

   * mediaLib is pre-installed on Solaris 10 and later, and it can also be
     downloaded for free from http://www.sun.com/processors/vis/mlib.html.

-- x86 ONLY:  libjpeg-turbo SDK

   * The libjpeg-turbo SDK package can be obtained from the "Files" area of:

     http://sourceforge.net/projects/libjpeg-turbo


*******************************************************************************
**     Building the VirtualGL Client for Exceed
*******************************************************************************

Prerequisites
=============

-- GNU Make v3.7 or later

   GNU Make for Win32 can be found in MSYS
   (http://www.mingw.org/download.shtml) or Cygwin (http://www.cygwin.com/)

-- Microsoft Visual C++ 2003 or later

   If you don't already have Visual C++, then the easiest way to get it is by
   installing the Windows SDK for Windows Server 2008 and .NET Framework 3.5
   (or a later version):

   http://msdn.microsoft.com/en-us/windows/dd146047.aspx

   The Windows SDK includes both 32-bit and 64-bit Visual C++ compilers and
   everything necessary to build VirtualGL.

   * For 32-bit builds, you can also use Microsoft Visual C++ 2008 Express
     Edition (or a later version.)  Visual C++ Express Edition is a free
     download.
   * Add the compiler and SDK binary directories (for instance,
     c:\Program Files\Microsoft Visual Studio 9.0\VC\BIN[\amd64];
     c:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE;
     c:\Program Files\Microsoft SDKs\Windows\v6.1\bin[\x64])
     to the system or user PATH environment variable prior to building
     VirtualGL.
   * Add the compiler and SDK include directories (for instance,
     c:\Program Files\Microsoft Visual Studio 9.0\VC\INCLUDE;
     c:\Program Files\Microsoft SDKs\Windows\v6.1\include)
     to the system or user INCLUDE environment variable prior to building
     VirtualGL.
   * Add the compiler and SDK library directories (for instance,
     c:\Program Files\Microsoft Visual Studio 9.0\VC\LIB[\amd64];
     c:\Program Files\Microsoft SDKs\Windows\v6.1\lib[\x64])
     to the system or user LIB environment variable prior to building
     VirtualGL.

-- OpenSSL headers and link libraries (optional)

   * Download the latest OpenSSL source tarball from http://www.openssl.org
   * Extract the tarball into the directory one level up from your VirtualGL
     build directory
   * Rename the OpenSSL source directory to "openssl.windows".
   * Download the Win32 binaries of NASM from the "Download" section of
     http://sourceforge.net/projects/nasm/.  Place nasm.exe somewhere in your
     PATH.
   * cd to the OpenSSL source directory and issue the following
     commands to configure the OpenSSL build:

     perl Configure VC-WIN32
     ms\do_nasm.bat

   * Build OpenSSL:

     nmake -f ms\nt.mak

   * If you are building OpenSSL 0.9.8h or 0.9.8i and are using Visual C++ 2008
     or later, then comment out the following lines in
     openssl.windows\inc32\openssl\ossl_typ.h prior to building VirtualGL:

     typedef struct ocsp_req_ctx_st OCSP_REQ_CTX;
     typedef struct ocsp_response_st OCSP_RESPONSE;
     typedef struct ocsp_responder_id_st OCSP_RESPID;

     Hopefully this will be fixed in future releases of OpenSSL.

-- OpenText Exceed XDK v8 or later

   * Add the XDK include path (for instance,
     c:\Program Files\Hummingbird\Connectivity\13.00\Exceed\XDK\include)
     to the system or user INCLUDE environment variable prior to building
     VirtualGL.
   * Add the XDK library path (for instance,
     c:\Program Files\Hummingbird\Connectivity\13.00\Exceed\XDK\lib)
     to the system or user LIB environment variable prior to building
     VirtualGL.

-- libjpeg-turbo SDK for Visual C++

   * The libjpeg-turbo SDK Windows installer (EXE) can be obtained from the
     "Files" area of:

     http://sourceforge.net/projects/libjpeg-turbo

   * Add the libjpeg-turbo include path (c:\libjpeg-turbo[64]\include) to the
     system or user INCLUDE environment variable prior to building VirtualGL.
   * Add the libjpeg-turbo library path (c:\libjpeg-turbo[64]\lib) to the
     system or user LIB environment variable prior to building VirtualGL.

64-bit Build
============

-- To build a 64-bit version of the VirtualGL Client for Exceed, pass an
   argument of "subplatform=64" to 'make' when performing the build:

     make subplatform=64

   The binaries will reside in "windows64/bin".  This configuration has not
   been fully tested.


*******************************************************************************
**     Building VirtualGL on Cygwin
*******************************************************************************

You should be able to build and run the VirtualGL client on Cygwin, although
this configuration has not been thoroughly tested.  To build VirtualGL on
Cygwin:

-- Install the following Cygwin packages if they aren't already installed:
   gcc
   gcc-core
   gcc-g++
   make
   libX11-devel
   libXext-devel
   libGL-devel
   libGLU-devel

-- libjpeg-turbo SDK

   * The libjpeg-turbo Cygwin package can be obtained from the "Files" area of:

     http://sourceforge.net/projects/libjpeg-turbo

-- Pass an argument of "platform=cygwin" to 'make' when performing the
   VirtualGL build:

     make platform=cygwin

   The binaries will reside in "cygwin/bin".


*******************************************************************************
**     Building
*******************************************************************************

Assuming all of the above is set up correctly, you should be able to just type

  make

On Solaris, type

  gmake

instead.


*******************************************************************************
**     Makefile Options
*******************************************************************************

Each of these options can be passed as an argument to "make" or "gmake".  You
can also create a file called "config" in the root of the VirtualGL build
directory and add Makefile options to that file so as to avoid having to type
them every time you build VirtualGL.

CC = gcc

  * On Solaris, this builds VirtualGL using the GCC compiler rather than the
    default (Sun Studio) compiler.  gcc and g++ should be in your PATH.

DEBUG = yes

  * Build a version of VirtualGL with debugging symbols and no optimization.
    The debug version will reside in "${platform}/dbg/lib" and
    "${platform}/dbg/bin", whereas the release version will reside in
    "${platform}/lib" and "${platform}/bin", so these two versions can be built
    independently of one another.

JPEGLIB = medialib

  * On Solaris/x86, use Sun mediaLib to perform JPEG compression/decompression
    and YUV encoding/decoding rather than libjpeg-turbo.  If this option is
    passed to the VirtualGL build, then VirtualGL will also use Sun mediaLib
    to perform gamma correction.

LJTDIR = {libjpeg-turbo directory}

  * Override the directory in which the build system looks for the 
    libjpeg-turbo SDK (default: /opt/libjpeg-turbo).

LJTLIB = {libjpeg-turbo library directory}

  * Override the directory in which the build system looks for the
    libjpeg-turbo link libraries (default: /opt/libjpeg-turbo/lib32 for 32-bit
    builds and /opt/libjpeg-turbo/lib64 for 64-bit builds.)

M32 = yes

  * On x86-64 systems, this cross-compiles a 32-bit (x86) version of VirtualGL.

SSLINC = {OpenSSL include directory)

  * Override the directory in which the VirtualGL build looks for the
    OpenSSL headers (see build prerequisites for default.)

SSLLIB = {OpenSSL static library directory)

  * Override the directory in which the VirtualGL build looks for the
    OpenSSL static link libraries (see build prerequisites for default.)

USEGLP = no

  * On Solaris/SPARC, this builds VirtualGL without GLP extension code.  This
    is necessary to build VirtualGL on versions of Sun OpenGL prior to 1.5.

USESSL = yes

  * Build VirtualGL with SSL support.

*******************************************************************************
**     Installing / Distributing
*******************************************************************************

On Unix systems, you can type

  make install [prefix={install prefix}]

"prefix" defaults to "/usr/local" but can be changed to something else (such
as "/usr") if you prefer.  Executables will be installed to "$prefix/bin", and
libraries will be installed to "$prefix/lib" (or "$prefix/lib/64" or
"$prefix/lib64", as appropriate.)

To build a redistributable package, type

  make dist

  * On Linux, this requires RPM v4 or later.
  * On Solaris, this requires pkgmk, pkgtrans, and bzip2.
  * On Windows, this requires the Nullsoft Install System
    (http://nsis.sourceforge.net/.)  makensis.exe should be in your PATH.
  * On OS X, this requires the PackageMaker application, which must be
    installed in /Developer/Applications/Utilities.

To build a redistributable DEB package (Debian-compatible systems), type

  make deb
