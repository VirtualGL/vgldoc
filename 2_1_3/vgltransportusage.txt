* Using VirtualGL with the VGL Image Transport
{anchor: VGL_Image_Transport_Usage}

*** Advantages of the VGL Image Transport
#OPT: noList! plain!

	* Seamless windows; every application window appears as a separate window on
		the user's desktop
	* Supports stereographic and overlay rendering
	* Built-in encryption
	* Consumes fewer server resources, since the 2D (X11) rendering occurs on the
		client machine

*** Disadvantages of the VGL Image Transport
#OPT: noList! plain!

	* The VGL Image Transport is designed to be used with remote X servers, thus
		it relies on the chatty remote X11 protocol to send the 2D elements of the
		application's GUI to the user's desktop.  As a result, the VGL Image
		Transport is not recommended for use on high-latency networks
	* No collaboration features
	* Requires purchasing Exceed for use with Windows clients
	* The client is not stateless.  As with any remote X11 app, if the network
		connection drops, then the application will exit

** VGL Image Transport with X11 Forwarding
{anchor: X11_Forwarding}

This mode is recommended for use on secure local-area networks.  The X11
traffic is encrypted, but the VirtualGL image stream is left unencrypted to
maximize performance.

*** Procedure for Linux/Solaris/Mac Clients
#OPT: noList! plain!

	#. Start the X server if it isn't started already (__Mac clients:__ start the
		Mac X11 application.)

	#. Open a new terminal window (__Mac clients:__ in the X11 application, start
		a new xterm [Command-N] if one isn't already started.)

	#. In the same terminal/xterm window, open a Secure Shell (SSh) session into
		the VirtualGL server:

		#Verb: <<---
		/opt/VirtualGL/bin/vglconnect {user}@{server}
		---

		Replace __''{user}''__ with your user account name on the VirtualGL server and
		__''{server}''__ with the hostname or IP address of that server.

	#. In the SSh session, start a 3D application using VirtualGL:

		#Verb: <<---
		/opt/VirtualGL/bin/vglrun [vglrun options] {application_executable_or_script} {arguments}
		---

	Consult {ref prefix="Chapter ": Advanced_Configuration} for more
	information on ''vglrun'' command line options.

*** Procedure for Windows Clients
#OPT: noList! plain!

	#. Start Exceed if it isn't already started.  Hover the mouse pointer over
		the Exceed taskbar icon and make a note of the display number on which
		Exceed is listening (__Example:__ "Exceed 0.0 Multiwindow Mode".)

	#. Open a new Command Prompt.

	#. In the same Command Prompt window, set the ''DISPLAY'' environment
		variable to match the display on which Exceed is listening.  Example:

		#Verb: <<---
		set DISPLAY=:0.0
		---

		!!! If you only ever plan to use one Exceed session at a time, then you
		can set the ''DISPLAY'' environment variable in your global user
		environment (__Control Panel-->System-->Advanced-->Environment Variables__.)

	#. Open a Secure Shell (SSh) session into the VirtualGL server:

		#Verb: <<---
		cd /d "c:\program files\virtualgl-{version}-{build}"
		vglconnect {user}@{server}
		---

		Replace __''{user}''__ with your user account name on the VirtualGL server and
		__''{server}''__ with the hostname or IP address of that server.

	#. In the SSh session, start a 3D application using VirtualGL:

		#Verb: <<---
		/opt/VirtualGL/bin/vglrun [vglrun options] {application_executable_or_script} {arguments}
		---

	Consult {ref prefix="Chapter ": Advanced_Configuration} for more
	information on ''vglrun'' command line options.

** VGL Image Transport with a Direct X11 Connection
{anchor: Direct_X11_Connection}

As with the [[#X11_Forwarding][previous mode]], this mode performs optimally on
local-area networks.  However, it is less secure, since both the X11 traffic
and the VGL image stream are unencrypted.  This mode is primarily useful in
grid environments where you may not know ahead of time which server will
execute a VirtualGL job.  It is assumed that the "submit host" (the machine
into which you connect with SSh) and the "execute hosts" (the machines that
will run VirtualGL jobs) share the same home directories and reside in the same
domain.

	!!! Some newer Linux and Solaris distributions ship with default settings
	that do not allow TCP connections into the X server.  Such systems cannot be
	used as clients with this procedure unless they are reconfigured to allow
	X11 TCP connections.

*** Procedure
#OPT: noList! plain!

The procedure for this mode is identical to the procedure for
[[#X11_Forwarding][X11 forwarding]], except that you should pass a ''-x''
argument to ''vglconnect'' when connecting to the server:

	#Verb: <<---
	/opt/VirtualGL/bin/vglconnect -x {user}@{server}
	---

** VGL Image Transport with SSL Encryption
{anchor: SSL_Encryption}

This mode encrypts the VGL image stream and, when used in conjunction with
[[#X11_Forwarding][X11 forwarding]], provides a completely secure solution.
However, enabling SSL encryption can reduce VirtualGL's performance by as much
as 20% on high-speed networks such as Ethernet.

*** Procedure
#OPT: noList! plain!

The procedure for this mode is identical to the procedure for 
[[#X11_Forwarding][X11 forwarding]], except that you should pass an argument
of ''+s'' to ''vglrun'' when starting a 3D application using VirtualGL.  You
can also set the environment variable ''VGL_SSL'' to ''1'' on the VirtualGL
server prior to invoking ''vglrun''.  (see {ref prefix="Chapter ": Advanced_Configuration}
for more details.)

** VGL Image Transport with X11 Forwarding and SSh Tunneling
{anchor: SSh_Tunneling}

This mode is useful when either the VirtualGL server or the client machine
are behind restrictive firewalls and only SSh connections are allowed through.
Both the VGL image stream and the X11 traffic are tunneled through the SSh
connection, and thus this mode provides a completely secure solution.  However,
using SSh tunneling can reduce VirtualGL's performance by anywhere from 20-40%
on high-speed networks such as Ethernet.

*** Procedure
#OPT: noList! plain!

The procedure for this mode is identical to the procedure for
[[#X11_Forwarding][X11 forwarding]], except that you should pass a ''-s''
argument to ''vglconnect'' when connecting to the server:

	#Verb: <<---
	/opt/VirtualGL/bin/vglconnect -s {user}@{server}
	---

''vglconnect'' will make two SSh connections into the server, the first to find
an open port on the server and the second to create the secure image tunnels
and open the secure shell.  If you are not using an SSh agent to create
password-less logins, then this mode will require you to enter your password
twice.

''vglconnect -s'' can be used to create multi-layered SSh tunnels.  For
instance, if the VirtualGL server is not directly accessible from the Internet,
you can use ''vglconnect -s'' to connect to a gateway server, then use
''vglconnect -s'' again on the gateway server to connect to the VirtualGL
server.  Both the X11 and the VGL image traffic will be forwarded from the
VirtualGL server through the gateway and to the client.

#IMG: sshtunnel.png

** VGL Image Transport over Gigabit Networks

When using the VGL image transport over Gigabit Ethernet or faster networks,
it may be desirable to disable image compression.  This can be accomplished by
passing an argument of ''-c rgb'' to ''vglrun'' or setting the ''VGL_COMPRESS''
environment variable to ''rgb'' on the VirtualGL server.  Disabling image
compression will reduce VirtualGL's server and client CPU usage by 50% or more,
but the tradeoff is that it will also increase VirtualGL's network usage by a
factor of 10 or more.  Thus, disabling image compression is not recommended
unless you are using switched Gigabit Ethernet (or faster) infrastructure and
have plenty of bandwidth to spare.

** VGL Image Transport with XDMCP

Using the VGL Image Transport with XDMCP should mostly "just work".  Once you
have established the connection to the remote X server using XDMCP, you can
then follow any of the above procedures to create an SSh connection to the
application server and start a 3D application using VirtualGL.  The application
server and the machine running the remote X server need not necessarily be the
same machine.

** The VirtualGL Client Application: Nuts and Bolts

The VirtualGL Client application receives encoded and/or compressed images on a
dedicated TCP socket, decodes and/or decompresses the images, and draws the
images into the appropriate X window.  In previous versions of VirtualGL, it
was necessary to manually start the VirtualGL Client prior to connecting to the
application server, but the new ''vglconnect'' script wraps both ''vglclient''
and SSh to greatly simplify the process of creating VGL Image Transport
connections.  One consequence of this ease of use is that the actual workings
of ''vglclient'' are hidden from view, which makes it a bit more difficult to
see the cause of connection failures and other issues as they happen.

''vglconnect'' invokes ''vglclient'' with an argument of ''-detach'', which
causes ''vglclient'' to completely detach from the console and run as a
background daemon.  It will remain running silently in the background,
accepting VGL Image Transport connections for the X server on which it was
started, until that X server is reset or until the ''vglclient'' process is
explicitly killed.  Logging out of the X server will reset the X server and
thus kill all ''vglclient'' instances that are attached to it.  You can also
explicitly kill all instances of ''vglclient'' running under your user account
by invoking

	#Verb: <<---
	vglclient -kill
	---

(''vglclient'' is in ''/opt/VirtualGL/bin'' on Linux/Mac/Solaris systems and
in ''c:\\program files\\virtualgl-{version}-{build}'' on Windows systems.)

''vglconnect'' instructs ''vglclient'' to redirect all of its console output
to a log file named
__''{home}''__''/.vgl/vglconnect-''__''{hostname}''__''-''__''{display}''__''.log'',
where __''{home}''__ is the path of the current user's home directory
(''%USERPROFILE%'' on Windows systems), __''{hostname}''__ is the name of the
computer running ''vglconnect'', and __''{display}''__ is the name of the
current X display (read from the ''DISPLAY'' environment or passed to
''vglconnect'' using the ''-display'' argument.)  In the event that something
goes wrong, this log file is the first place to check.

When ''vglclient'' successfully starts on a given X display, it stores its
listener port numbers in a pair of root window properties on the X display.  If
other ''vglclient'' instances attempt to start on the same X display, they read
the X window properties, determine that another ''vglclient'' instance is
already running, and exit to allow the first instance to retain control.
''vglclient'' will clean up these X properties under most circumstances, even
if it is explicitly killed.  However, under rare circumstances (if sent a
SIGKILL signal on Unix, for instance), a ''vglclient'' instance may exit
uncleanly and leave the X properties set.  In these cases, it may be necessary
to add an argument of ''-force'' to ''vglconnect'' the next time you use it.
This tells ''vglconnect'' to start a new ''vglclient'' instance, regardless of
whether ''vglclient'' thinks that there is already an instance running on this
X display.  Alternately, you can simply reset your X server to clear the
orphaned X window properties.

*** The VirtualGL Client and Firewalls

To retain compatibility with previous versions of VirtualGL, the first
''vglclient'' instance on a given machine will attempt to listen on port 4242
for unencrypted connections and 4243 for SSL connections.  If it fails to
obtain one of those ports, because another application or another ''vglclient''
instance is already using them, then ''vglclient'' will try to obtain a free
port in the range of 4200-4299.  Failing that, it will request a free port from
the operating system.

In a nutshell: if you only ever plan to run one X server at a time on your
client machine, which means that you'll only ever need one instance of
''vglclient'' at a time, then it is sufficient to open inbound ports 4242 and
4243 in your client machine's firewall.  If you plan to run multiple X servers
on your client machine, which means that you will need to run multiple
''vglclient'' instances, then you may wish to open ports 4200-4299.  Similarly,
if you are running ''vglclient'' on a multi-user TurboVNC or Sun Ray server
that has a firewall, then you may wish to open ports 4200-4299 in the server's
firewall.  Opening ports 4200-4299 will accommodate up to 50 separate
''vglclient'' instances.  More instances than that cannot be accommodated on a
firewalled machine, unless the firewall is able to create rules based on
application executables instead of listening ports.

Note that it is not necessary to open any inbound ports in the firewall to use
the VGL Image Transport with [[#SSh_Tunneling][SSh Tunneling]].