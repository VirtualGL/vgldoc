* Using VirtualGL with TurboVNC
{anchor: TurboVNC_Usage}

Referring to {ref prefix="Chapter ": Overview}, the X11 Image Transport
bypasses VirtualGL's internal image compressor and instead draws the
rendered 3D images to an X server using standard X11 drawing commands.  Since
this results in the images being sent uncompressed to the X server, the X11
Image Transport is designed to be used with an "X Proxy."  An X proxy
acts as a virtual X server, receiving X11 commands from the application (and
from VirtualGL), rendering the X11 commands into images, compressing the
resulting images, and sending the compressed images over the network to a
client or clients.

Since VirtualGL is sending rendered 3D images to the X proxy at a very fast
rate, the proxy must be able to compress the images very quickly in order to
keep up.  Unfortunately, however, most X proxies can't.  They simply aren't
designed for the types of full-screen video workloads that VirtualGL generates.
Therefore, the VirtualGL Project provides an optimized X proxy called
"TurboVNC", which is based on the
[[http://www.realvnc.com/][Virtual Network Computing (VNC)]] standard (more
specifically, on the [[http://www.tightvnc.com][TightVNC]] variant thereof.)

On the surface, TurboVNC behaves very similarly to its parent project, but 
TurboVNC has been tuned to provide interactive performance for the types of
full-screen video workloads that VirtualGL produces.  On these types of image
workloads, TurboVNC performs as much as an order of magnitude faster than
TightVNC, uses more than an order of magnitude less CPU time to compress each
frame, and it produces generally better compression ratios.  As with TightVNC,
TurboVNC uses JPEG compression for image tiles with a high number of unique
colors and paletted encoding for image tiles with a low number of
unique colors.  Part of TurboVNC's speedup comes from the use of TurboJPEG, the
same high-speed vector-optimized JPEG codec used by the VGL Image Transport.
However, TurboVNC also bypasses the CPU-hungry smoothness detection routines
that TightVNC uses to determine whether a tile is a good candidate for JPEG
compression.  Furthermore, TurboVNC eliminates buffer copies, it maximizes
network efficiency by using the largest tile sizes supported by the TightVNC
protocol, and it never uses a Zlib compression level higher than 1.  In the
aggregate, TurboVNC compresses 2D application workloads less efficiently than
TightVNC, but it generally does a better job than TightVNC of compressing 3D
application workloads.  Also, TurboVNC is much faster across the board than
TightVNC.

TurboVNC also has the ability to hide network latency by decompressing and
drawing a frame on the client while the next frame is being fetched from the
server.  This can improve performance dramatically on high-latency
connections.  TurboVNC additionally provides client-side double buffering, full
support for Solaris, and other refinements.

*** Advantages of TurboVNC (when compared to the VGL Image Transport)
#OPT: noList! plain!

	* TurboVNC eliminates the need to send X11 traffic over the network, and thus
		it performs very well on low-bandwidth, high-latency connections (such as
		broadband or long-haul T1 lines.)  The 3D application's GUI will load and
		render much faster (perhaps even orders of magnitude faster) with TurboVNC
		than with the VGL Image Transport on such connections.

	* For 3D applications whose rendered images do not contain very many unique
		colors (for instance, CAD applications in wireframe mode), the hybrid
		protocol used by TurboVNC will generally use less network bandwidth than
		the pure motion JPEG protocol used by the VGL Image Transport.

	* TurboVNC provides two lossless compression modes, one of which is designed
		to reduce server CPU usage on gigabit networks and the other of which is
		designed to provide reasonable performance on wide-area networks (at the
		expense of higher server CPU usage.)  The VGL Image Transport's only
		lossless option is uncompressed RGB.

	* TurboVNC includes a lossless refresh feature which will, on demand, send
		a mathematically lossless image of the current VNC desktop to the client.
		A user connecting over a low-bandwidth connection can use low-quality JPEG
		to achieve the best performance when manipulating the 3D model, then they
		can request a lossless refresh when they are ready to study the model in
		detail.

	* TurboVNC provides rudimentary collaboration capabilities.  Multiple clients
		can simultaneously view the same TurboVNC session and pass around control
		of the keyboard and mouse.

	* The TurboVNC viewer is stateless.  If the network hiccups or the viewer is
		otherwise disconnected, the session continues to run on the server and can
		be rejoined from any machine on the network.

	* No X server is required on the client machine.  This reduces the deployment
		cost and complexity for Windows clients.

	* Any web browser or PDA can be used as a TurboVNC client (with reduced
		performance.)

*** Disadvantages of TurboVNC
#OPT: noList! plain!

	* No seamless windows.  All application windows are constrained to a "virtual
		desktop", which displays in a single window on the client machine.

	* TurboVNC will generally	require about 20% more server CPU cycles to
		maintain the same frame rate as the VGL Image Transport, both because it
		has to compress more pixels in each frame	(an entire desktop rather than a
		single window) and because it has to perform 2D (X11) rendering as well as
		3D rendering.

	* TurboVNC does not support quad-buffered stereo or transparent overlays.

** Using TurboVNC and VirtualGL on the Same Server
{anchor: TurboVNC_Usage_Local}

The most common (and optimal) way to use TurboVNC is to set it up on the same
server that is running VirtualGL.  This allows VirtualGL to send its rendered
3D images to TurboVNC through shared memory rather than sending them over a
network.

#IMG: x11transport.png
#OPT fmt=latex: w=4cm

*** Procedure
#OPT: noList! plain!

	#. __Mac clients:__ Start the Mac X11 application.

	#. Open a new Command Prompt/terminal window on your client machine.
		(__Mac clients:__ in the X11 application, start a new xterm [Command-N] if
		one isn't already started.)

	#. In the new Command Prompt/terminal/xterm window, open a Secure Shell (SSh)
		session into the VirtualGL/TurboVNC server:

		Linux/Mac/Solaris clients :: {:}
		#Verb: <<---
		ssh {user}@{server}
		---

		Windows clients :: {:}
		#Verb: <<---
		"c:\program files\turbovnc\putty" {user}@{server}
		---

		Replace __''{user}''__ with your user account name on the VirtualGL server and
		__''{server}''__ with the hostname or IP address of that server.

	#. In the SSh session, start a TurboVNC session:

		#Verb: <<---
		/opt/TurboVNC/bin/vncserver
		---

	#. Make a note of the X display number that the TurboVNC session is
		occupying, for instance:
		{nl}{nl}
		''New 'X' desktop is my_server:1''
		{nl}{nl}
		If this is the first time that a TurboVNC session has ever been run
		under this user account, TurboVNC will prompt for a VNC session password.

	#. The SSh session can now be exited, if desired.

	#. On the client machine, start the TurboVNC Viewer.

		Linux/Mac/Solaris clients :: {:}
		Open a new terminal/xterm and type
		#Verb: <<---
		/opt/TurboVNC/bin/vncviewer
		---

		Windows clients :: {:}
		Select __TurboVNC Viewer__ in the __TurboVNC__ Start Menu group.

	#. A small dialog box will appear.
		{nl}{nl}
		|| Windows TurboVNC viewer || Linux/Mac/Solaris TurboVNC viewer ||
		| {img:turbovnc1.png} | {img:turbovnc2.png} |
		{nl}
		Enter the X display name (hostname/IP address and display number) of the
		TurboVNC session in the "VNC Server" field, then click "Connect" (Windows)
		or press Enter (Linux/Mac/Solaris.)

	#. Another dialog box appears, prompting for the VNC session password.
		{nl}{nl}
		|| Windows TurboVNC viewer || Linux/Mac/Solaris TurboVNC viewer ||
		| {img:turbovnc3.png} | {img:turbovnc4.png} |
		{nl}
		Enter the VNC session password and click "OK" (Windows) or press
		Enter (Linux/Mac/Solaris.)
		{nl}{nl}
		A TurboVNC desktop window should appear on your client machine.  This
		window contains a virtual X server with which you can interact to launch
		X-Windows applications on the TurboVNC server.

	#. Open a new terminal inside the TurboVNC desktop.

	#. In the terminal, start a 3D application using VirtualGL:

		#Verb: <<---
		/opt/VirtualGL/bin/vglrun [vglrun options] {application_executable_or_script} {arguments}
		---

		VirtualGL will detect that the X display connection is local and will
		automatically enable the X11 Image Transport.

	Consult {ref prefix="Chapter ": Advanced_Configuration} for more
	information on ''vglrun'' command line options.

** Using TurboVNC When VirtualGL Is Running on a Different Machine
{anchor: TurboVNC_Usage_Remote}

#IMG: vgltransportservernetwork.png
#OPT fmt=latex: w=4cm

If TurboVNC and VirtualGL are running on different servers, then it is
desirable to use the VGL Image Transport to send images from the VirtualGL
server to the TurboVNC server.  It is also desirable to disable image
compression in the VGL Image Transport.  Otherwise, the images would have to be
compressed by the VirtualGL server, decompressed by the VirtualGL Client, then
recompressed by the TurboVNC server, which is a waste of CPU resources.
However, sending images uncompressed over a network requires a fast network
(generally, Gigabit Ethernet or faster), so there needs to be a fast link
between the VirtualGL server and the TurboVNC server for this procedure to
perform well.

*** Procedure
#OPT: noList! plain!

The procedure for using the VGL Image Transport to remotely display 3D
applications from a VirtualGL server to a TurboVNC server is the same as the
[[#X11_Forwarding][procedure]] for using the VGL Image Transport to remotely
display 3D applications from a VirtualGL server to a remote 2D X server, with
the following notable differences:

	#. The "client" in this case is really the TurboVNC server.

	#. The "X server" is really the TurboVNC session.

	#. Once connected to the VirtualGL server with SSh, it is recommended that
		you disable image compression in the VGL Image Transport by either setting
		the ''VGL_COMPRESS'' environment variable to ''rgb'' or passing an argument
		of ''-c rgb'' to ''vglrun'' when launching VirtualGL.  Otherwise, VirtualGL
		will detect that the connection to the X server is remote, and it will
		automatically try to enable JPEG compression.

** Disconnecting and Killing the TurboVNC Session

Closing the TurboVNC viewer disconnects from the TurboVNC session, but the
TurboVNC session will remain running on the TurboVNC server (as will any
applications that you may have started in the session), and you can reconnect
to the session at any time.

To kill a TurboVNC session:

	#. Using SSh (''c:\\Program Files\\TurboVNC\\putty.exe'' on Windows clients),
		log into the server that is running the TurboVNC session that you wish to
		kill.{nl} \
		... or ...{nl} \
		Using the TurboVNC Viewer, connect to the TurboVNC session that you wish to
		kill, and open a new terminal in that TurboVNC session.

	#. Type the following command:

		#Verb: <<---
		/opt/TurboVNC/bin/vncserver -kill :{n}
		---

	Replace __''{n}''__ with the X display number of the TurboVNC session you
	wish to kill.

To list the X display numbers and process ID's of all TurboVNC sessions that
are currently running under your user account on a particular machine, type the
following command:

	#Verb: <<---
	/opt/TurboVNC/bin/vncserver -list
	---

** Using TurboVNC in a Web Browser

When a TurboVNC session is created, it automatically launches a miniature web
server that serves up a Java TurboVNC viewer applet.  This Java TurboVNC viewer
can be used to connect to the TurboVNC session from a machine that does not
have a native TurboVNC viewer installed (or a machine for which no native
TurboVNC viewer is available.)  The Java viewer is significantly slower than
the native viewer on high-speed networks, but on low-speed networks the Java
viewer and native viewers have comparable performance.  The Java viewer does
not currently support double buffering.

To use the Java TurboVNC viewer, point your web browser to:

''http://''__''{turbovnc_server}''__'':{5800+''__''n''__''}''

where __''{turbovnc_server}''__ is the hostname or IP address of the TurboVNC
server, and __''n''__ is the X display number of the TurboVNC session to which
you want to connect.

__Example:__
If the TurboVNC session is occupying X display ''my_server:1'', then point your
web browser to:

''http://my_server:5801''

** Optimizing TurboVNC's Performance for Different Network Types

The level of image compression in TurboVNC can be adjusted to balance the
(sometimes conflicting) goals of high image quality and high performance.
There are four options which control the manner in which TurboVNC compresses
images:

	Allow JPEG compression :: {:}
		If this option is enabled, then TurboVNC will use JPEG compression for all
		image tiles with more than 24 unique colors and paletted encoding for all
		other image tiles.  If this option is disabled, then TurboVNC will select
		between paletted or raw encoding depending on the size of the image tile
		and its color count.

	JPEG image quality :: {:}
		Lower quality levels produce grainier JPEG images with more noticeable
		compression artifacts, but lower quality levels also use less network
		bandwidth and CPU time.  Refer to {ref prefix="Section ": VGL_QUAL} for
		more details.

	JPEG chrominance subsampling :: {:}
		After converting the image from RGB to YUV, chrominance subsampling
		discards some of the U and V (chrominance) components to save space.  1x
		subsampling retains the chrominance components for all pixels, 2x
		subsampling retains the chrominance components for every other pixel, 4x
		subsampling retains the chrominance components for every fourth pixel, and
		grayscale throws out all of the chrominance components.  Refer to
		{ref prefix="Section ": VGL_SUBSAMP} for more details.

	Zlib compression level :: {:}
		If Zlib compression is enabled, then paletted and raw-encoded image tiles
		will be compressed with Zlib prior to transmission.  This decreases network
		bandwidth usage at the expense of increased server CPU usage.  If JPEG
		compression is enabled, then Zlib compression is always used with non-JPEG
		image tiles.

In the Windows TurboVNC Viewer, these parameters can be adjusted by accessing
the Options dialog box (click on the "Options" button in the "TurboVNC
Connection" dialog box or, after connecting to the server, click on the
Connection Options button in the toolbar.)  In the Unix TurboVNC viewer, press
F8 after connecting to bring up the options menu.  In the Java viewer, click on
the Options button at the top of the browser window.

The TurboVNC Viewer provides five image encoding protocols, corresponding
to the most useful combinations of the image compression options described
above:

|| Image encoding protocol || Allow JPEG || JPEG image quality || \
	JPEG chrominance subsampling || Zlib compression level || Notes ||
| "Tight + Perceptually Lossless JPEG" | Yes | 95 | 1x | N/A | \
	This protocol should be perceptually lossless (that is, any image \
	compression artifacts it produces should be imperceptible to the human \
	eye under most viewing conditions.)  This protocol requires a great deal \
	of network bandwidth, however, and is generally not recommended except on \
	50 Megabit/second and faster networks. |
| "Tight + Medium Quality JPEG" | Yes | 80 | 2x | N/A | \
	For image tiles with a high number of unique colors, this protocol produces \
	some minor, but generally not very noticeable, image compression artifacts. \
	All else being equal, this protocol typically uses about twice the network \
	bandwidth of the "Low Quality" protocol and about half the bandwidth of the \
	"Perceptually Lossless" protocol, making it appropriate for medium-speed \
	networks such as 10 Megabit ethernet. |
| "Tight + Low Quality JPEG" | Yes | 30 | 4x | N/A | \
	For image tiles with a high number of unique colors, this protocol produces \
	very noticeable image compression artifacts.  However, it performs \
	optimally on low-bandwidth connections.  If image quality is more critical \
	than performance, then use one of the other connection protocols or take \
	advantage of the "Lossless Refresh" feature. |
| "Lossless Tight" | No | N/A | N/A | 0 | \
	This protocol uses paletted encoding for image tiles with a low number of \
	unique colors but otherwise does not perform any image compression at all. \
	It is thus suitable only for gigabit and faster networks.  This protocol \
	uses significantly less CPU time than any of the JPEG-based protocols. |
| "Lossless Tight + Zlib" | No | N/A | N/A | 1 | \
	This protocol uses paletted encoding for image tiles with a low number of \
	unique colors and raw encoding for image tiles with a high number of unique \
	colors.  It compresses all image tiles using Zlib with compression level \
	1.  For certain types of applications (CAD applications, in particular), \
	this protocol uses less network bandwidth than the "Perceptually Lossless" \
	protocol, but it also uses significantly more CPU time on the server than \
	any of the JPEG-based protocols. |

In the Windows TurboVNC Viewer, the image encoding protocol can be set using
the Options dialog box (click on the "Options" button in the "TurboVNC
Connection" dialog box or, after connecting to the server, click on the
Connection Options button in the toolbar.)  In the Java viewer, the same thing
is accomplished by clicking on the "Options" button at the top of the browser
window.  With the Linux/Mac/Solaris TurboVNC Viewer, the "Perceptually
Lossless" protocol is the default, and you can use the following command line
switches to select another protocol:

''-medqual'' = select the "Tight + Medium Quality JPEG" protocol {nl}
''-lowqual'' = select the "Tight + Low Quality JPEG" protocol {nl}
''-lossless'' = select the "Lossless Tight" protocol {nl}
''-losslesswan'' = select the "Lossless Tight + Zlib" protocol {nl}

You can also press the F8 key after connecting to pop up a menu from which you
can select a different protocol.

*** Lossless Refresh

Since both of TurboVNC's mathematically lossless protocols have performance
drawbacks, another option for image-quality-critical applications is the
"Lossless Refresh" feature.  When a lossless refresh is requested by a TurboVNC
viewer, the server will send a mathematically lossless copy of the current
TurboVNC desktop to the requesting viewer.  So, for instance, a user can
rotate/pan/zoom an object in their 3D application using a very low-quality JPEG
setting, then when that user is ready to interpret or analyze the object, they
can request a lossless refresh of TurboVNC's virtual screen.

To perform a lossless refresh in the Windows or Unix TurboVNC viewers, press
CTRL-ALT-SHIFT-L (in the Windows TurboVNC Viewer, you can also click on the
Lossless Refresh toolbar icon.)  In the Java TurboVNC Viewer, click on the
"Lossless Refresh" button at the top of the browser window.

** Securing a TurboVNC Connection

Normally, the connection between the TurboVNC server and the TurboVNC viewer is
completely unencrypted, but securing that connection can be easily
accomplished by using the port forwarding feature of Secure Shell (SSh.)  After
you have started a TurboVNC session on the TurboVNC server, open a new SSh
connection into the TurboVNC server using the following command line:

	Linux/Mac/Solaris clients :: {:}
	#Verb: <<---
	ssh -L {5900+n}:localhost:{5900+n} {user}@{server}
	---

	Windows clients :: {:}
	#Verb: <<---
	"c:\program files\turbovnc\putty" -L {5900+n}:localhost:{5900+n} {user}@{server}
	---

Replace __''{user}''__ with your user account name on the TurboVNC server and
__''{server}''__ with the hostname or IP address of that server.  Replace
__''n''__ with the X display number of the TurboVNC session to which you want
to connect.

For instance, if you wish to connect to display '':1'' on server ''my_server''
using user account ''my_user'', you would type:

	Linux/Mac/Solaris clients :: {:}
	#Verb: <<---
	ssh -L 5901:localhost:5901 my_user@my_server
	---

	Windows clients :: {:}
	#Verb: <<---
	"c:\program files\turbovnc\putty" -L 5901:localhost:5901 my_user@my_server
	---

After the SSh connection has been established, you can then launch the
TurboVNC viewer and point it to ''localhost:''__''{n}''__ (''localhost:1'' in the
above example.)

*** Performance Notes
#OPT: noList! plain!

For LAN connections and other high-speed networks, tunneling the TurboVNC
connection over SSh will reduce performance by as much as 20-40%.  For
wide-area networks, however, there is no performance penalty for using SSh
tunneling with TurboVNC.

** Further Reading

For more detailed instructions on the usage of TurboVNC:

	Linux/Mac/Solaris :: Refer to the TurboVNC man pages:
	#Verb: <<---
	man -M /opt/TurboVNC/man {vncserver | Xvnc | vncviewer | vncconnect | vncpasswd}
	---

	Windows :: Use the embedded help feature (the question mark button in the
	upper right of the TurboVNC Viewer window.)

The TightVNC documentation:

http://www.tightvnc.com/docs.html

might also be helpful, since TurboVNC is based on TightVNC and shares many of
its features.
